from __future__ import print_function
from __future__ import division
import operator
import sys
import math
import random


python3 = True if sys.version_info.major > 2 else False
if len(sys.argv) >= 2:
    msg = sys.argv[1]
else:
    msg = input("Enter message: ") if python3 else raw_input("Enter message: ")
msg = """
SCFFP TJTGS CFRJZ XCVLG LYGLZ IJSLW CJLGJ XLGGC ELIFZ XXCFJ TYNSC JTGJS LJLXB HCYVT GTJCY LJNZF VZIBC FJJTX LGBTL GUCXL WTCTX BWTLR JSCJT JNCGS LFAZR TYEGV TWWGJ SCJRP YCXTO NLFLT YJLFL GJLRT YGZTH LECYJ ZNZYR LFTIU CXLWT CNCGN ZFVTY EZYCF LAFKT JXLYJ JZZWK GTYEG ZATCW XLRTC HKJJS CJGZK YRGCH TJZWR GASZZ WAZKW RGSLC YRXCF JTYSC MLHLL YRLML WZBTY ECGAF LLYTY ECWEZ FTJSX IZFCE LYJGJ FPTYE JZBTA VZKJJ SLXZG JFLWT CHWLZ YLGHP RCJCX TYTYE SZNNZ KWRJS CJSCM LITJJ LRNTJ SSLFF LCWLO BLFJT GLTYG TEYCW YZTGL CYCWP GTGGK FLWPJ SLRCJ CTGYJ JSCJY ZTGPT RTRSC MLGZX LWKAV NTJSH CAVEF ZKYRZ YJSLB RGGPY RTACJ LJSLP NLFLT YTJTC WWPGL JKBJZ RLCWN TJSCI KJKFL TYNST ASDKC YJKXJ FCYGX TGGTZ YXCVL GTJTX BZGGT HWLJZ AFCAV ATBSL FGKGT YERTE TJCWX LJSZR GBRGG JCYRG IZFBZ GJRTE TJCWG KFMLT WWCYA LCYRJ SLPNL FLCYC FXGWL YEJSA CHTYL JZIIT ALTYT JTCJT MLVLB JAZXB WLJLW PGLBC FCJLI FZXJS LZJSL FTYJL WWTEL YALCE LYATL GTJST YVJSL BWCYN CGJZJ CWRLY TCHTW TJPZY CWWGT RLGCY RTJNC GGJFK AJKFL RJZBF LMLYJ TYJLF CELYA PFTMC WFPJS LGPYR TACJL SCRBF TXLXT YTGJL FTCWG TEYZI IHKJC IJLFJ SCJJS LFLTG YZBCB LFJFC TWCYR JSLFL SCGHL LYYZY LNGZI CYPBF ZEFLG GTYGT RLFGJ STYVJ SLGPY RTACJ LNCGA WZGLR RZNYT YUCYK CFPCI JLFFK XZKFG ZIKYC KJSZF TGLRG KFMLT WWCYA LHKJE TMLYJ SCJHK WVAZW WLAJT ZYTYJ SLKVT GCKJS ZFTGL RTJTG SCFRJ ZTXCE TYLNS CJJSL PNLFL KBJZT VYZNJ SCJGL MLFCW ZIJSL BLZBW LNSZW CKYAS LRBRG WLIJJ SLATM TWGLF MTALT YILHF KCFPC YRJNZ YZNSC MLHZC FRBZG TJTZY GCJAT JCRLW WLJZJ SLHLG JZIXP VYZNW LRELY ZYLZI JSLGL YTZFG SCRRT FLAJA ZYJCA JNTJS UCXLW TCZFX CFJTY HKJTG KBBZG LTJTG BZGGT HWLJS CJATJ CRLWW LNCGU KGJJS LMLST AWLIZ FBRGJ ZVLLB CYLPL ZYJSL JNZZI JSLXT GJTWW RZYJV YZNNS PJSLP NLFLF LECFR LRCGG BLATC WJSZK ESXCP HLJFT YTJPS CGGZX LJSTY EIZFK GGSLG LYJJS LIZWW ZNTYE XLGGC ELSTR RLYTY CYTXC ELITW LTYTY GJCEF CXCGZ FJZIN TGSPZ KNLFL SLFLJ STYEG ZTCXE KLGGT YEJSC JGSLI LLWGJ SLYLL RJZHL ICTFW PRTGA FLJLG SLSCG CWGZT YAFLC GLRJS LGLAK FTJPW LMLWZ ISLFA ZXXGH KJKYI ZFJKY CJLWP RKLJZ CXTOK BNTJS SZKGL VLLBT YENLN LFLYJ CHWLJ ZGLJK BCGLA KFLAS CYYLW IZFVL PLOAS CYELH LIZFL JFTYT JPWLI JJZUZ TYJSL RPYCX TOJLC XIZFJ KYCJL WPGSL TGEZZ RCJTX BFZMT GTYEC YRGSL SCGJC VLYCW LCRIF ZXXCF JTYCY RKGLR CAZWK XYJFC YGBZG TJTZY ATBSL FJSCJ CWGZL OBWCT YGJSL GJLEC YZEFC BSPJF TYTJP VYZNG JSCJJ SLZBB ZGTJT ZYNTW WITYR TJFLC GZYCH WPGJF CTESJ IZFNC FRJZA FCAVT IJSLP GBZJT JCNZF RZINC FYTYE JFTYT JPGAT BSLFT GJZKE SLFJZ AFCAV JSCYX CFJTY GCYRT SCRJZ SKYJC WTJJW LHTJI ZFJSL AFTHH KJXCP HLPZK NTWWI TYRTJ XZFLL CGTWP VYZNT YECWW JSTGC JWLCG JGSLR TRYJF LGZFJ JZXCF JTYGF LMLFG TYEJF TAVGZ XCPHL NLGSZ KWRAZ YGTRL FZKFG LWMLG WKAVP TRZYJ NCYJJ ZBKGS ZKFWK AVJZZ ICFCY RTRZY JNCYJ JZLOB ZGLJF TYTJP JZXZF LFTGV JSCYY LALGG CFPNS LYPZK FLBWP TGKEE LGJNL IZWWZ NJFTY TJPGC RMTAL CYRKG LCMTE LYLFL ATBSL FCVLP NZFRZ IWLYE JSJSF LLGSZ KWRHL CRLDK CJLHL GJASC FWTL

"""

msg = msg.upper()
newMsg = ""
for i in range(len(msg)):
    if ord(msg[i]) > 64 and ord(msg[i]) < 91:
        newMsg += msg[i]
msg = newMsg

with open('english_quadgrams.txt') as f:
    lines = f.read().splitlines()

stdQuadOcc = {}
for line in lines:
    stdQuadOcc[line.split()[0]] = int(line.split()[1])

total = 0
for count in stdQuadOcc.values():
    total += count

def score(quad):
    if quad in stdQuadOcc:
        score = math.log10(float(stdQuadOcc[quad]/total))
    else:
        score = math.log10(0.01/total)
    return score

def decode(msg, keystr):
    '''Decodes the message.
    '''
    keystr = keystr.upper()
    msg = msg.upper()
    dec = ""
    for l in msg:
        dec += chr(keystr.index(l) + 65)
    return(dec)

def fitness(msg, keystr):
    msg = decode(msg, keystr)
    fitness = 0
    for i in range(len(msg) - 3):
        fitness += score(msg[i : i + 4])
    return fitness

def randSwitch(keystr):
    a = random.randint(0, 25)
    b = random.randint(0, 25)
    while a == b:
        b = random.randint(0, 25)
    if a > b:
        a, b = b, a
    keystr = (keystr[:a] + keystr[b] + keystr[a + 1:b]
              + keystr[a] + keystr[b + 1:])
    return keystr

def optimize(msg, keystr):
    maxfit = fitness(msg, keystr)
    iterations = 0
    while iterations < 1000:
        newkey = randSwitch(keystr)
        if fitness(msg, newkey) > maxfit:
            keystr = newkey
            maxfit = fitness(msg, keystr)
            iterations = 0
        else:
            iterations += 1
    return [keystr, maxfit]



while True:
    k = optimize(msg, "YBXONGSWKCPZFMTDHRQUJVELIA")
    print(k)
    print(decode(msg, k[0]).lower())

